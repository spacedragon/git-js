#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'simple-git'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    YARN_GPG = 'no'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  parameters {
    booleanParam(name: 'publish_to_npm', defaultValue: false, description: 'Publish to NPM.')
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Build Linux') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        withGithubNotify(context: 'Build Linux') {
          deleteDir()
          unstash 'source'
          script {
            docker.image("node:10").inside(){
              dir("${BASE_DIR}"){
                sh(label: 'Build NodeJS', script: './.ci/scripts/build-linux.sh')
                sh(label: 'Yarn Install', script: 'yarn install --frozen-lockfile')
              }
            }
          }
          stash allowEmpty: true, name: 'compiledSource', useDefaultExcludes: false
        }
      }
    }
    stage('Tests') {
      parallel {
        stage('Unit Tests') {
          // agent { label 'linux && immutable' } Reusing top level build agent
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'compiledSource'
            script {
              withGithubNotify(context: 'Unit Test', tab: 'tests') {
                docker.image("node:10").inside(){
                  dir("${BASE_DIR}") {
                    sh(label: 'Unit Tests', script: 'yarn run test:ci:unit')
                  }
                }
              }
            }
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "**/TEST-unit.xml")
            }
          }
        }
        stage('Integration Tests') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'compiledSource'
            script {
              withGithubNotify(context: 'Integration Test', tab: 'tests') {
                docker.image("node:10").inside(){
                  dir("${BASE_DIR}") {
                    sh(label: 'Unit Tests', script: 'yarn run test:ci:integration')
                  }
                }
              }
            }
          }
          post {
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "**/TEST-integration.xml")
            }
          }
        }
      }
    }
    stage('Deploy') {
      options { skipDefaultCheckout() }
      when {
        beforeAgent true
        allOf {
          tag pattern: 'v\\d+.*', comparator: 'REGEXP'
          expression { return params.publish_to_npm }
        }
      }
      steps {
        withGithubNotify(context: 'Deploy') {
          deleteDir()
          unstash 'compiledSource'
          script {
            withSecretVault(secret: 'secret/code-ci/aws-upload-key', user_var_name: 'ACCESS_KEY', pass_var_name: 'SECRET_ACCESS_KEY'){
              withSecretVault(secret: 'secret/code-ci/npm-token', pass_var_name: 'NPM_PASSWORD'){
                docker.image("node:10").inside(){
                  dir("${BASE_DIR}") {
                    sh(label: 'Upload NodeJS', script: './.ci/scripts/upload.sh')
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}